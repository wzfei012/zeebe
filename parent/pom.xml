<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.camunda</groupId>
    <artifactId>zeebe-bom</artifactId>
    <version>1.4.0-SNAPSHOT</version>
    <relativePath>../bom/pom.xml</relativePath>
  </parent>

  <artifactId>zeebe-parent</artifactId>
  <version>1.4.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>Zeebe Parent</name>
  <url>http://zeebe.io/</url>
  <inceptionYear>2017</inceptionYear>

  <licenses>
    <license>
      <name>Zeebe Community License v1.1</name>
      <url>https://zeebe.io/legal/zeebe-community-license-1.1</url>
    </license>
  </licenses>

  <properties>
    <version.java>17</version.java>

    <!-- Zeebe Community License v1.1 header -->
    <license.header>${maven.multiModuleProjectDirectory}/parent/COPYING-HEADER.txt</license.header>

    <project.build.sourceEncoding>utf-8</project.build.sourceEncoding>
    <!-- disable jdk8 javadoc checks on release build -->
    <additionalparam>-Xdoclint:none</additionalparam>
    <checkstyle.config.location>.checkstyle.xml</checkstyle.config.location>
    <spotbugs.include>spotbugs/spotbugs-include.xml</spotbugs.include>
    <spotbugs.exclude>spotbugs/spotbugs-exclude.xml</spotbugs.exclude>

    <!-- EXTERNAL LIBS -->
    <version.agrona>1.15.0</version.agrona>
    <version.animal-sniffer>1.21</version.animal-sniffer>
    <version.assertj>3.22.0</version.assertj>
    <version.awaitility>4.2.0</version.awaitility>
    <version.bouncycastle>1.70</version.bouncycastle>
    <version.camunda>7.16.0</version.camunda>
    <version.checkstyle>10.1</version.checkstyle>
    <version.commons-lang>3.12.0</version.commons-lang>
    <version.commons-logging>1.2</version.commons-logging>
    <version.commons-math>3.6.1</version.commons-math>
    <version.commons-codec>1.15</version.commons-codec>
    <version.commons-text>1.9</version.commons-text>
    <version.docker-java-api>3.2.13</version.docker-java-api>
    <version.elasticsearch>7.17.0</version.elasticsearch>
    <version.error-prone>2.11.0</version.error-prone>
    <version.grpc>1.45.1</version.grpc>
    <version.gson>2.9.0</version.gson>
    <version.guava>31.1-jre</version.guava>
    <version.hamcrest>2.2</version.hamcrest>
    <version.hppc>0.8.1</version.hppc>
    <version.httpasyncclient>4.1.5</version.httpasyncclient>
    <version.httpclient>4.5.13</version.httpclient>
    <version.httpcomponents>4.4.15</version.httpcomponents>
    <version.jackson>2.13.2.20220328</version.jackson>
    <version.java-grpc-prometheus>0.5.0</version.java-grpc-prometheus>
    <version.jna>5.11.0</version.jna>
    <version.junit>5.8.2</version.junit>
    <version.junit4>4.13.2</version.junit4>
    <version.opentest4j>1.2.0</version.opentest4j>
    <version.log4j>2.17.2</version.log4j>
    <version.minlog>1.3.1</version.minlog>
    <version.mockito>4.4.0</version.mockito>
    <version.mockito-jupiter>4.4.0</version.mockito-jupiter>
    <version.model>7.7.0</version.model>
    <version.msgpack>0.9.1</version.msgpack>
    <version.netty>4.1.74.Final</version.netty>
    <version.objenesis>3.2</version.objenesis>
    <version.prometheus>0.15.0</version.prometheus>
    <version.protobuf>3.19.4</version.protobuf>
    <version.protobuf-common>2.8.0</version.protobuf-common>
    <version.micrometer>1.8.4</version.micrometer>
    <version.rocksdbjni>7.0.3</version.rocksdbjni>
    <version.sbe>1.25.2</version.sbe>
    <version.scala-parser>2.1.1</version.scala-parser>
    <version.scala>2.13.8</version.scala>
    <version.slf4j>1.7.36</version.slf4j>
    <version.snakeyaml>1.30</version.snakeyaml>
    <version.javax>1.3.2</version.javax>
    <version.wiremock>2.32.0</version.wiremock>
    <version.conscrypt>2.5.2</version.conscrypt>
    <version.asm>9.2</version.asm>
    <version.testcontainers>1.16.3</version.testcontainers>
    <version.netflix.concurrency>0.3.6</version.netflix.concurrency>
    <version.zeebe-test-container>3.3.0</version.zeebe-test-container>
    <version.feel-scala>1.14.2</version.feel-scala>
    <version.dmn-scala>1.7.1</version.dmn-scala>
    <version.rest-assured>5.0.0</version.rest-assured>
    <version.spring>5.3.17</version.spring>
    <version.spring-boot>2.6.5</version.spring-boot>
    <version.concurrentunit>0.4.6</version.concurrentunit>
    <version.config>1.4.2</version.config>
    <version.kryo>5.3.0</version.kryo>
    <version.awaitility>4.0.3</version.awaitility>
    <version.failsafe>2.4.4</version.failsafe>
    <version.jqwik>1.6.5</version.jqwik>
    <version.jmock>2.12.0</version.jmock>
    <version.json-smart>2.4.8</version.json-smart>
    <version.byte-buddy>1.12.8</version.byte-buddy>
    <version.revapi>0.26.1</version.revapi>
    <version.commons-io>2.11.0</version.commons-io>
    <version.immutables>2.9.0</version.immutables>
    <version.jsr305>3.0.2</version.jsr305>
    <version.classgraph>4.8.143</version.classgraph>
    <version.plexus-util>3.4.1</version.plexus-util>
    <version.servlet-api>2.5</version.servlet-api>
    <version.osgi>6.0.0</version.osgi>
    <version.findbugs-annotations>3.0.1u2</version.findbugs-annotations>
    <version.spotbugs>4.5.3</version.spotbugs>
    <version.archunit>0.23.1</version.archunit>
    <version.easy-random>5.0.0</version.easy-random>

    <!-- maven plugins -->
    <plugin.version.antrun>3.0.0</plugin.version.antrun>
    <plugin.version.appassembler>2.1.0</plugin.version.appassembler>
    <plugin.version.build-helper>3.3.0</plugin.version.build-helper>
    <plugin.version.checkstyle>3.1.2</plugin.version.checkstyle>
    <plugin.version.compiler>3.10.1</plugin.version.compiler>
    <plugin.version.dependency-analyzer>1.12.0</plugin.version.dependency-analyzer>
    <plugin.version.dependency>3.3.0</plugin.version.dependency>
    <plugin.version.enforcer>3.0.0</plugin.version.enforcer>
    <plugin.version.exec>3.0.0</plugin.version.exec>
    <plugin.version.failsafe>3.0.0-M5</plugin.version.failsafe>
    <plugin.version.flaky-tests>2.1.1</plugin.version.flaky-tests>
    <plugin.version.jacoco>0.8.7</plugin.version.jacoco>
    <plugin.version.license>4.1</plugin.version.license>
    <plugin.version.maven-jar>3.2.2</plugin.version.maven-jar>
    <plugin.version.proto-backwards-compatibility>1.0.7</plugin.version.proto-backwards-compatibility>
    <plugin.version.protobuf-maven-plugin>0.6.1</plugin.version.protobuf-maven-plugin>
    <plugin.version.replacer>1.5.3</plugin.version.replacer>
    <plugin.version.resources>3.2.0</plugin.version.resources>
    <plugin.version.revapi>0.14.6</plugin.version.revapi>
    <plugin.version.scala>4.6.1</plugin.version.scala>
    <plugin.version.shade>3.3.0</plugin.version.shade>
    <plugin.version.sonar>3.9.1.2184</plugin.version.sonar>
    <plugin.version.sortpom>3.0.1</plugin.version.sortpom>
    <plugin.version.spotbugs>4.5.3.0</plugin.version.spotbugs>
    <plugin.version.spotless>2.22.0</plugin.version.spotless>
    <plugin.version.surefire>3.0.0-M5</plugin.version.surefire>
    <plugin.version.versions>2.10.0</plugin.version.versions>

    <!-- when updating this version, also change it in .idea/externalDependencies.xml -->
    <plugin.version.google-java-format>1.12.0</plugin.version.google-java-format>

    <!-- maven extensions -->
    <extension.version.os-maven-plugin>1.7.0</extension.version.os-maven-plugin>

    <!-- version against which backwards compatibility is checked -->
    <backwards.compat.version>1.3.0</backwards.compat.version>
    <ignored.changes.file>ignored-changes.json</ignored.changes.file>

    <!--
      you can use the following to disable some or all goals:
        - skipTests will skip all tests
        - skipITs will skip integration tests
        - skipUTs will skip unit tests
        - skipChecks will non-test checks, such as licensing, checkstyle, backwards compat, etc.
      -->
    <skipTests>false</skipTests>
    <skipUTs>${skipTests}</skipUTs>
    <skipITs>${skipTests}</skipITs>
    <jacoco.skip>${skipUTs}</jacoco.skip>

    <!--
      you can use the following to disable specific check plugins. this can also be used to skip the
      formatting goals of these plugins. the approach taken is to use a single new property,
      skipChecks, which is the default value for pre-defined properties such as checkstyle.skip.
      that way, you can use skipChecks, but you can also still use checkstyle.skip if you only want
      to disable checkstyle
      -->
    <skipChecks>false</skipChecks>
    <checkstyle.skip>${skipChecks}</checkstyle.skip>
    <revapi.skip>${skipChecks}</revapi.skip>
    <license.skip>${skipChecks}</license.skip>
    <enforcer.skip>${skipChecks}</enforcer.skip>
    <mdep.analyze.skip>${skipChecks}</mdep.analyze.skip>
    <sort.skip>${skipChecks}</sort.skip>
    <spotless.apply.skip>${skipChecks}</spotless.apply.skip>
    <spotless.checks.skip>${skipChecks}</spotless.checks.skip>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- Internal Zeebe modules -->
      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-broker</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-protocol-test-util</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-dispatcher</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-logstreams</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-workflow-engine</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-msgpack-core</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-msgpack-value</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-protocol-impl</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-protocol-jackson</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-transport</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-test-util</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-util</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-db</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-build-tools</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-gateway-protocol</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-gateway</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-elasticsearch-exporter</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-protocol-asserts</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-expression-language</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-feel-integration</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-snapshots</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-journal</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-dmn</artifactId>
        <version>${project.version}</version>
      </dependency>

      <!-- ATOMIX -->
      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-atomix-cluster</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-atomix-storage</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-atomix-utils</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-atomix</artifactId>
        <version>${project.version}</version>
      </dependency>

      <!-- Third party dependencies -->
      <dependency>
        <groupId>com.fasterxml.jackson</groupId>
        <artifactId>jackson-bom</artifactId>
        <version>${version.jackson}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-framework-bom</artifactId>
        <version>${version.spring}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot</artifactId>
        <version>${version.spring-boot}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-actuator</artifactId>
        <version>${version.spring-boot}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-autoconfigure</artifactId>
        <version>${version.spring-boot}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-actuator-autoconfigure</artifactId>
        <version>${version.spring-boot}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-test</artifactId>
        <version>${version.spring-boot}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <version>${version.spring-boot}</version>
        <exclusions>
          <exclusion>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
          </exclusion>
          <exclusion>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-to-slf4j</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-broker</artifactId>
        <version>${project.version}</version>
        <classifier>tests</classifier>
        <type>test-jar</type>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-workflow-engine</artifactId>
        <version>${project.version}</version>
        <classifier>tests</classifier>
        <type>test-jar</type>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-logstreams</artifactId>
        <version>${project.version}</version>
        <classifier>tests</classifier>
        <type>test-jar</type>
      </dependency>

      <dependency>
        <groupId>io.camunda</groupId>
        <artifactId>zeebe-client-java</artifactId>
        <version>${project.version}</version>
        <classifier>tests</classifier>
        <type>test-jar</type>
      </dependency>

      <dependency>
        <groupId>org.agrona</groupId>
        <artifactId>agrona</artifactId>
        <version>${version.agrona}</version>
      </dependency>

      <dependency>
        <groupId>org.msgpack</groupId>
        <artifactId>msgpack-core</artifactId>
        <version>${version.msgpack}</version>
      </dependency>

      <dependency>
        <groupId>org.msgpack</groupId>
        <artifactId>jackson-dataformat-msgpack</artifactId>
        <version>${version.msgpack}</version>
      </dependency>

      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${version.junit}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${version.junit4}</version>
      </dependency>

      <dependency>
        <groupId>com.tngtech.archunit</groupId>
        <artifactId>archunit</artifactId>
        <version>${version.archunit}</version>
      </dependency>

      <dependency>
        <groupId>com.tngtech.archunit</groupId>
        <artifactId>archunit-junit5-engine</artifactId>
        <version>${version.archunit}</version>
      </dependency>

      <dependency>
        <groupId>com.tngtech.archunit</groupId>
        <artifactId>archunit-junit5-api</artifactId>
        <version>${version.archunit}</version>
      </dependency>

      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>${version.mockito}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-junit-jupiter</artifactId>
        <version>${version.mockito-jupiter}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.opentest4j</groupId>
        <artifactId>opentest4j</artifactId>
        <version>${version.opentest4j}</version>
      </dependency>

      <dependency>
        <groupId>org.assertj</groupId>
        <artifactId>assertj-core</artifactId>
        <version>${version.assertj}</version>
      </dependency>

      <dependency>
        <groupId>org.awaitility</groupId>
        <artifactId>awaitility</artifactId>
        <version>${version.awaitility}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>io.rest-assured</groupId>
        <artifactId>rest-assured</artifactId>
        <version>${version.rest-assured}</version>
      </dependency>

      <dependency>
        <groupId>uk.co.real-logic</groupId>
        <artifactId>sbe-tool</artifactId>
        <version>${version.sbe}</version>
      </dependency>

      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>${version.slf4j}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-api</artifactId>
        <version>${version.log4j}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-slf4j-impl</artifactId>
        <version>${version.log4j}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-core</artifactId>
        <version>${version.log4j}</version>
      </dependency>

      <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest</artifactId>
        <version>${version.hamcrest}</version>
      </dependency>

      <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest-core</artifactId>
        <version>${version.hamcrest}</version>
      </dependency>

      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-library</artifactId>
        <version>${version.scala}</version>
      </dependency>

      <dependency>
        <groupId>org.scala-lang.modules</groupId>
        <artifactId>scala-parser-combinators_2.13</artifactId>
        <version>${version.scala-parser}</version>
      </dependency>

      <dependency>
        <groupId>org.camunda.bpm.model</groupId>
        <artifactId>camunda-xml-model</artifactId>
        <version>${version.camunda}</version>
      </dependency>

      <dependency>
        <groupId>org.rocksdb</groupId>
        <artifactId>rocksdbjni</artifactId>
        <version>${version.rocksdbjni}</version>
      </dependency>

      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-bom</artifactId>
        <version>${version.grpc}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>com.google.protobuf</groupId>
        <artifactId>protobuf-bom</artifactId>
        <version>${version.protobuf}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>com.google.api.grpc</groupId>
        <artifactId>proto-google-common-protos</artifactId>
        <version>${version.protobuf-common}</version>
      </dependency>

      <dependency>
        <groupId>io.netty</groupId>
        <artifactId>netty-bom</artifactId>
        <version>${version.netty}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.elasticsearch</groupId>
        <artifactId>elasticsearch-x-content</artifactId>
        <version>${version.elasticsearch}</version>
      </dependency>

      <dependency>
        <groupId>org.elasticsearch.client</groupId>
        <artifactId>elasticsearch-rest-client</artifactId>
        <version>${version.elasticsearch}</version>
      </dependency>

      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>${version.guava}</version>
      </dependency>

      <dependency>
        <groupId>com.google.code.gson</groupId>
        <artifactId>gson</artifactId>
        <version>${version.gson}</version>
      </dependency>

      <dependency>
        <groupId>io.zeebe</groupId>
        <artifactId>zeebe-test-container</artifactId>
        <version>${version.zeebe-test-container}</version>
        <!-- This version (1.1.1) conflict with junit's dependency (1.1.0) -->
        <exclusions>
          <exclusion>
            <groupId>org.apiguardian</groupId>
            <artifactId>apiguardian-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>animal-sniffer-annotations</artifactId>
        <version>${version.animal-sniffer}</version>
      </dependency>

      <dependency>
        <groupId>com.google.errorprone</groupId>
        <artifactId>error_prone_annotations</artifactId>
        <version>${version.error-prone}</version>
      </dependency>

      <dependency>
        <groupId>org.objenesis</groupId>
        <artifactId>objenesis</artifactId>
        <version>${version.objenesis}</version>
      </dependency>

      <dependency>
        <groupId>org.yaml</groupId>
        <artifactId>snakeyaml</artifactId>
        <version>${version.snakeyaml}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>${version.commons-lang}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-math3</artifactId>
        <version>${version.commons-math}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-text</artifactId>
        <version>${version.commons-text}</version>
      </dependency>

      <dependency>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-annotations</artifactId>
        <version>${version.spotbugs}</version>
      </dependency>

      <!-- for dependency convergence -->
      <dependency>
        <groupId>commons-logging</groupId>
        <artifactId>commons-logging</artifactId>
        <version>${version.commons-logging}</version>
      </dependency>

      <!-- for dependency convergence between elasticsearch-rest-client and rest-assured -->
      <dependency>
        <groupId>commons-codec</groupId>
        <artifactId>commons-codec</artifactId>
        <version>${version.commons-codec}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpcore</artifactId>
        <version>${version.httpcomponents}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpcore-nio</artifactId>
        <version>${version.httpcomponents}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpasyncclient</artifactId>
        <version>${version.httpasyncclient}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>${version.httpclient}</version>
      </dependency>

      <dependency>
        <groupId>io.prometheus</groupId>
        <artifactId>simpleclient</artifactId>
        <version>${version.prometheus}</version>
      </dependency>

      <dependency>
        <groupId>io.prometheus</groupId>
        <artifactId>simpleclient_httpserver</artifactId>
        <version>${version.prometheus}</version>
      </dependency>

      <dependency>
        <groupId>io.prometheus</groupId>
        <artifactId>simpleclient_hotspot</artifactId>
        <version>${version.prometheus}</version>
      </dependency>

      <dependency>
        <groupId>io.micrometer</groupId>
        <artifactId>micrometer-core</artifactId>
        <version>${version.micrometer}</version>
      </dependency>

      <dependency>
        <groupId>io.micrometer</groupId>
        <artifactId>micrometer-registry-prometheus</artifactId>
        <version>${version.micrometer}</version>
      </dependency>

      <dependency>
        <groupId>me.dinowernli</groupId>
        <artifactId>java-grpc-prometheus</artifactId>
        <version>${version.java-grpc-prometheus}</version>
        <exclusions>
          <exclusion>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-all</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <!-- Interface based code generation -->
      <dependency>
        <groupId>org.immutables</groupId>
        <artifactId>value</artifactId>
        <version>${version.immutables}</version>
      </dependency>

      <dependency>
        <groupId>javax.annotation</groupId>
        <artifactId>javax.annotation-api</artifactId>
        <version>${version.javax}</version>
      </dependency>

      <dependency>
        <groupId>com.github.tomakehurst</groupId>
        <artifactId>wiremock-jre8</artifactId>
        <version>${version.wiremock}</version>
      </dependency>
      <dependency>
        <!-- specified for dependency convergence -->
        <groupId>org.conscrypt</groupId>
        <artifactId>conscrypt-openjdk-uber</artifactId>
        <version>${version.conscrypt}</version>
      </dependency>
      <dependency>
        <!-- specified for dependency convergence -->
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>${version.servlet-api}</version>
      </dependency>
      <dependency>
        <!-- NOTE: required because of https://github.com/tomakehurst/wiremock/issues/1083-->
        <groupId>org.ow2.asm</groupId>
        <artifactId>asm</artifactId>
        <version>${version.asm}</version>
      </dependency>

      <!-- Testcontainers & Docker for container based integration tests -->
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>testcontainers-bom</artifactId>
        <version>${version.testcontainers}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>com.github.docker-java</groupId>
        <artifactId>docker-java-api</artifactId>
        <version>${version.docker-java-api}</version>
      </dependency>

      <!--
        primarily for dependency convergence with testcontainers
        see https://github.com/testcontainers/testcontainers-java/issues/3308
      -->
      <dependency>
        <groupId>net.java.dev.jna</groupId>
        <artifactId>jna</artifactId>
        <version>${version.jna}</version>
      </dependency>

      <dependency>
        <groupId>net.jqwik</groupId>
        <artifactId>jqwik</artifactId>
        <version>${version.jqwik}</version>
        <!-- This version (1.1.1) conflict with junit's dependency (1.1.0) -->
        <exclusions>
          <exclusion>
            <groupId>org.apiguardian</groupId>
            <artifactId>apiguardian-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>net.jqwik</groupId>
        <artifactId>jqwik-api</artifactId>
        <version>${version.jqwik}</version>
        <exclusions>
          <!-- This version (1.1.1) conflict with junit's dependency (1.1.0) -->
          <exclusion>
            <groupId>org.apiguardian</groupId>
            <artifactId>apiguardian-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.jmock</groupId>
        <artifactId>jmock</artifactId>
        <version>${version.jmock}</version>
      </dependency>

      <dependency>
        <groupId>com.netflix.concurrency-limits</groupId>
        <artifactId>concurrency-limits-core</artifactId>
        <version>${version.netflix.concurrency}</version>
      </dependency>

      <dependency>
        <groupId>org.camunda.feel</groupId>
        <artifactId>feel-engine</artifactId>
        <version>${version.feel-scala}</version>
      </dependency>

      <dependency>
        <groupId>org.camunda.bpm.extension.dmn.scala</groupId>
        <artifactId>dmn-engine</artifactId>
        <version>${version.dmn-scala}</version>
      </dependency>

      <dependency>
        <groupId>org.camunda.bpm.model</groupId>
        <artifactId>camunda-dmn-model</artifactId>
        <version>${version.camunda}</version>
      </dependency>

      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava-testlib</artifactId>
        <version>${version.guava}</version>
      </dependency>

      <dependency>
        <groupId>net.jodah</groupId>
        <artifactId>concurrentunit</artifactId>
        <version>${version.concurrentunit}</version>
      </dependency>

      <dependency>
        <groupId>com.esotericsoftware</groupId>
        <artifactId>kryo</artifactId>
        <version>${version.kryo}</version>
      </dependency>

      <dependency>
        <groupId>com.typesafe</groupId>
        <artifactId>config</artifactId>
        <version>${version.config}</version>
      </dependency>

      <dependency>
        <groupId>org.jeasy</groupId>
        <artifactId>easy-random-core</artifactId>
        <version>${version.easy-random}</version>
      </dependency>

      <dependency>
        <groupId>net.jodah</groupId>
        <artifactId>failsafe</artifactId>
        <version>${version.failsafe}</version>
      </dependency>

      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy</artifactId>
        <version>${version.byte-buddy}</version>
      </dependency>

      <dependency>
        <groupId>io.github.classgraph</groupId>
        <artifactId>classgraph</artifactId>
        <version>${version.classgraph}</version>
      </dependency>

      <dependency>
        <groupId>com.esotericsoftware</groupId>
        <artifactId>minlog</artifactId>
        <version>${version.minlog}</version>
      </dependency>

      <!-- primarily for dependency convergence in wiremock, can be removed once fixed upstream -->
      <dependency>
        <groupId>net.minidev</groupId>
        <artifactId>json-smart</artifactId>
        <version>${version.json-smart}</version>
      </dependency>

      <!-- primarily for dependency convergence between log4j2 and other libraries -->
      <dependency>
        <groupId>org.osgi</groupId>
        <artifactId>org.osgi.core</artifactId>
        <version>${version.osgi}</version>
      </dependency>

      <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
        <version>${version.commons-io}</version>
      </dependency>

      <dependency>
        <groupId>com.google.code.findbugs</groupId>
        <artifactId>jsr305</artifactId>
        <version>${version.jsr305}</version>
      </dependency>

      <dependency>
        <groupId>com.google.code.findbugs</groupId>
        <artifactId>annotations</artifactId>
        <version>${version.findbugs-annotations}</version>
      </dependency>

      <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcpkix-jdk15on</artifactId>
        <version>${version.bouncycastle}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcprov-jdk15on</artifactId>
        <version>${version.bouncycastle}</version>
        <scope>test</scope>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>io.camunda</groupId>
      <artifactId>zeebe-build-tools</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>

    <pluginManagement>
      <plugins>
        <!-- MAVEN COMPILER -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${plugin.version.compiler}</version>
          <configuration>
            <parameters>true</parameters>
            <release>${version.java}</release>
            <compilerArgs>
              <!-- ensure we generate a class file for package-info.java files to avoid recompiling every time -->
              <arg>-Xpkginfo:always</arg>
            </compilerArgs>
            <useIncrementalCompilation>false</useIncrementalCompilation>
          </configuration>
        </plugin>

        <!-- compatibility checks/guard -->
        <plugin>
          <groupId>org.revapi</groupId>
          <artifactId>revapi-maven-plugin</artifactId>
          <version>${plugin.version.revapi}</version>
          <configuration>
            <!-- see the property's documentation as to why -->
            <checkDependencies>true</checkDependencies>
            <!-- expands maven properties in the configuration files -->
            <expandProperties>true</expandProperties>
            <!-- allows us to pre-defined ignored-changes, even when missing -->
            <failOnMissingConfigurationFiles>false</failOnMissingConfigurationFiles>
            <analysisConfigurationFiles>
              <!-- look for an optional relative configuration file -->
              <configurationFile>
                <path>revapi.json</path>
              </configurationFile>
              <!-- uses the default configuration file packaged in build-tools -->
              <configurationFile>
                <resource>revapi/revapi.json</resource>
              </configurationFile>
              <!-- will pick up a project relative ignored-changes file -->
              <configurationFile>
                <path>${ignored.changes.file}</path>
              </configurationFile>
            </analysisConfigurationFiles>
            <!--
              unfortunately we cannot use the meta version LATEST since we want to run this on
              different branches which need to compare to different versions
              -->
            <oldVersion>${backwards.compat.version}</oldVersion>
            <pipelineConfiguration>
              <transformBlocks>
                <!-- always execute the various differences plugins first which can exclude some
                     differences for the semantic version checker -->
                <block>
                  <item>revapi.differences</item>
                  <item>revapi.versions</item>
                </block>
              </transformBlocks>
            </pipelineConfiguration>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>org.revapi</groupId>
              <artifactId>revapi-java</artifactId>
              <version>${version.revapi}</version>
            </dependency>
            <dependency>
              <groupId>io.camunda</groupId>
              <artifactId>zeebe-build-tools</artifactId>
              <version>${project.version}</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <id>check</id>
              <goals>
                <goal>check</goal>
              </goals>
              <phase>verify</phase>
            </execution>
          </executions>
        </plugin>

        <!-- javadoc generation -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${plugin.version.javadoc}</version>
          <configuration>
            <source>${version.java}</source>
            <quiet>true</quiet>
            <additionalOptions>-Xdoclint:none</additionalOptions>
            <additionalDependencies>
              <additionalDependency>
                <groupId>javax.annotation</groupId>
                <artifactId>javax.annotation-api</artifactId>
                <version>1.3.2</version>
              </additionalDependency>
            </additionalDependencies>
          </configuration>
          <executions>
            <execution>
              <id>attach-javadocs</id>
              <goals>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- LICENSE PLUGIN -->
        <plugin>
          <groupId>com.mycila</groupId>
          <artifactId>license-maven-plugin</artifactId>
          <version>${plugin.version.license}</version>
          <configuration>
            <header>${license.header}</header>
            <properties>
              <owner>camunda services GmbH</owner>
              <email>info@camunda.com</email>
            </properties>
            <includes>
              <include>**/*.java</include>
              <include>**/*.scala</include>
            </includes>
            <excludes>
              <exclude>benchmarks/project/**/*</exclude>
            </excludes>
            <mapping>
              <java>SLASHSTAR_STYLE</java>
            </mapping>
          </configuration>
        </plugin>

        <!-- CHECKSTYLE -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>${plugin.version.checkstyle}</version>
          <configuration>
            <configLocation>check/.checkstyle.xml</configLocation>
            <includeTestSourceDirectory>true</includeTestSourceDirectory>
            <encoding>UTF-8</encoding>
            <failOnViolation>true</failOnViolation>
            <sourceDirectories>
              <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>
              <sourceDirectory>${project.build.testSourceDirectory}</sourceDirectory>
            </sourceDirectories>
          </configuration>
          <!-- dependency on build tool to reference the checkstyle cfg -->
          <dependencies>
            <dependency>
              <groupId>io.camunda</groupId>
              <artifactId>zeebe-build-tools</artifactId>
              <version>${project.version}</version>
            </dependency>
            <dependency>
              <groupId>com.puppycrawl.tools</groupId>
              <artifactId>checkstyle</artifactId>
              <version>${version.checkstyle}</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <id>validate-java</id>
              <goals>
                <goal>check</goal>
              </goals>
              <phase>validate</phase>
              <configuration></configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>com.github.ekryd.sortpom</groupId>
          <artifactId>sortpom-maven-plugin</artifactId>
          <version>${plugin.version.sortpom}</version>
        </plugin>

        <!-- Unit tests -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${plugin.version.surefire}</version>
          <configuration>
            <failIfNoTests>false</failIfNoTests>
            <trimStackTrace>false</trimStackTrace>
            <redirectTestOutputToFile>true</redirectTestOutputToFile>
            <properties>
              <property>
                <name>listener</name>
                <value>io.camunda.zeebe.ZeebeTestListener</value>
              </property>
            </properties>
            <reportNameSuffix>${env.SUREFIRE_REPORT_NAME_SUFFIX}</reportNameSuffix>
            <statelessTestsetReporter implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter">
              <disable>false</disable>
              <version>3.0</version>
              <usePhrasedFileName>false</usePhrasedFileName>
              <usePhrasedTestSuiteClassName>true</usePhrasedTestSuiteClassName>
              <usePhrasedTestCaseClassName>true</usePhrasedTestCaseClassName>
              <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>
            </statelessTestsetReporter>
            <skip>${skipUTs}</skip>
          </configuration>
        </plugin>

        <!-- Integration tests -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${plugin.version.failsafe}</version>
          <configuration>
            <failIfNoTests>false</failIfNoTests>
            <trimStackTrace>false</trimStackTrace>
            <redirectTestOutputToFile>true</redirectTestOutputToFile>
            <properties>
              <property>
                <name>listener</name>
                <value>io.camunda.zeebe.ZeebeTestListener</value>
              </property>
            </properties>
            <reportNameSuffix>${env.SUREFIRE_REPORT_NAME_SUFFIX}</reportNameSuffix>
            <!--
              ensure junit5 display names are properly reported; see the documentation for more
              https://maven.apache.org/surefire/maven-failsafe-plugin/examples/junit-platform.html
              -->
            <statelessTestsetReporter implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter">
              <disable>false</disable>
              <version>3.0</version>
              <usePhrasedFileName>false</usePhrasedFileName>
              <usePhrasedTestSuiteClassName>true</usePhrasedTestSuiteClassName>
              <usePhrasedTestCaseClassName>true</usePhrasedTestCaseClassName>
              <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>
            </statelessTestsetReporter>
            <skip>${skipITs}</skip>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- Build Helper Plugin -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>${plugin.version.build-helper}</version>
        </plugin>

        <!-- Shade Plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>${plugin.version.shade}</version>
        </plugin>

        <!-- App Assembler Plugin -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>appassembler-maven-plugin</artifactId>
          <version>${plugin.version.appassembler}</version>
        </plugin>

        <!-- Exec Plugin -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>${plugin.version.exec}</version>
          <configuration>
            <!-- Define system properties in one place, see https://github.com/camunda-zeebe/zeebe/issues/377 -->
            <systemProperties>
              <systemProperty>
                <key>sbe.output.dir</key>
                <value>${project.build.directory}/generated-sources/sbe</value>
              </systemProperty>
              <systemProperty>
                <key>sbe.java.generate.interfaces</key>
                <value>true</value>
              </systemProperty>
              <systemProperty>
                <key>sbe.decode.unknown.enum.values</key>
                <value>true</value>
              </systemProperty>
              <systemProperty>
                <key>sbe.xinclude.aware</key>
                <value>true</value>
              </systemProperty>
            </systemProperties>
          </configuration>
        </plugin>

        <!-- Resources Plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${plugin.version.resources}</version>
        </plugin>

        <!-- Scala Plugin -->
        <plugin>
          <groupId>net.alchim31.maven</groupId>
          <artifactId>scala-maven-plugin</artifactId>
          <version>${plugin.version.scala}</version>
          <configuration>
            <scalaVersion>${version.scala}</scalaVersion>
            <source>${version.java}</source>
            <target>${version.java}</target>
          </configuration>
          <executions>
            <execution>
              <id>scala-compile-first</id>
              <goals>
                <goal>add-source</goal>
                <goal>compile</goal>
              </goals>
              <phase>process-resources</phase>
            </execution>
            <execution>
              <id>scala-test-compile</id>
              <goals>
                <goal>testCompile</goal>
              </goals>
              <phase>process-test-resources</phase>
            </execution>
          </executions>
        </plugin>

        <!--This plugin's configuration is used to store Eclipse m2e settings
          only. It has no influence on the Maven build itself. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <versionRange>[1.3.2,)</versionRange>
                    <goals>
                      <goal>java</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>

        <!-- Ant run plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>${plugin.version.antrun}</version>
        </plugin>

        <!-- Versions plugin to update versions in pom files -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>${plugin.version.versions}</version>
        </plugin>

        <!-- Google code format plugin -->
        <plugin>
          <groupId>com.diffplug.spotless</groupId>
          <artifactId>spotless-maven-plugin</artifactId>
          <version>${plugin.version.spotless}</version>
          <configuration>
            <java>
              <googleJavaFormat>
                <version>${plugin.version.google-java-format}</version>
                <style>GOOGLE</style>
              </googleJavaFormat>
            </java>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>com.google.googlejavaformat</groupId>
              <artifactId>google-java-format</artifactId>
              <version>${plugin.version.google-java-format}</version>
            </dependency>
          </dependencies>
        </plugin>

        <!-- protobuf generation -->
        <plugin>
          <groupId>org.xolstice.maven.plugins</groupId>
          <artifactId>protobuf-maven-plugin</artifactId>
          <version>${plugin.version.protobuf-maven-plugin}</version>
          <configuration>
            <checkStaleness>true</checkStaleness>
            <protocArtifact>com.google.protobuf:protoc:${version.protobuf}:exe:${os.detected.classifier}</protocArtifact>
            <pluginId>grpc-java</pluginId>
            <pluginArtifact>io.grpc:protoc-gen-grpc-java:${version.grpc}:exe:${os.detected.classifier}</pluginArtifact>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>compile</goal>
                <goal>compile-custom</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- protobuf backwards compatibility check; not skippable unfortunately -->
        <plugin>
          <groupId>com.salesforce.servicelibs</groupId>
          <artifactId>proto-backwards-compatibility</artifactId>
          <version>${plugin.version.proto-backwards-compatibility}</version>
          <configuration>
            <protoSourceRoot>${project.basedir}/src/main/proto</protoSourceRoot>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>backwards-compatibility-check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>com.google.code.maven-replacer-plugin</groupId>
          <artifactId>replacer</artifactId>
          <version>${plugin.version.replacer}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${plugin.version.enforcer}</version>
          <executions>
            <execution>
              <id>enforce-dependency-convergence</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <dependencyConvergence></dependencyConvergence>
                </rules>
              </configuration>
            </execution>
            <execution>
              <id>enforce-unique-dependencies</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <banDuplicatePomDependencyVersions></banDuplicatePomDependencyVersions>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${plugin.version.dependency}</version>
          <!-- To run with Java 11 - https://issues.apache.org/jira/browse/MDEP-613-->
          <dependencies>
            <dependency>
              <groupId>org.apache.maven.shared</groupId>
              <artifactId>maven-dependency-analyzer</artifactId>
              <version>${plugin.version.dependency-analyzer}</version>
            </dependency>
          </dependencies>

          <executions>
            <execution>
              <id>analyze-dependencies</id>
              <goals>
                <goal>analyze-only</goal>
              </goals>
              <!-- The analyze-only goal assumes that the test-compile phase has been executed -->
              <phase>verify</phase>
              <configuration>
                <failOnWarning>true</failOnWarning>
                <outputXML>true</outputXML>
                <!-- dependencies not directly used in all projects during tests -->
                <ignoredUnusedDeclaredDependencies combine.children="append">
                  <dep>org.apache.logging.log4j:log4j-slf4j-impl</dep>
                  <dep>org.apache.logging.log4j:log4j-core</dep>
                  <dep>io.camunda:zeebe-build-tools</dep>
                  <dep>io.camunda:zeebe-gateway-protocol</dep>
                  <dep>org.ow2.asm:asm</dep>
                  <dep>org.apache.maven.surefire:surefire-junit4</dep>
                  <dep>org.apache.maven.surefire:surefire-junit47</dep>
                  <dep>org.apache.maven.surefire:surefire-junit-platform</dep>
                  <dep>org.junit.jupiter:junit-jupiter-engine</dep>
                  <dep>org.junit.vintage:junit-vintage-engine</dep>
                  <dep>org.codehaus.plexus:plexus-utils</dep>
                  <dep>org.bouncycastle:bcpkix-jdk15on</dep>
                  <dep>org.bouncycastle:bcprov-jdk15on</dep>
                </ignoredUnusedDeclaredDependencies>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${plugin.version.maven-jar}</version>
          <configuration>
            <useDefaultManifestFile>false</useDefaultManifestFile>
          </configuration>
        </plugin>

        <!-- JaCoCo Plugin -->
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${plugin.version.jacoco}</version>
          <executions>
            <execution>
              <id>coverage-initialize</id>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
            </execution>
            <execution>
              <id>coverage-report</id>
              <goals>
                <goal>report</goal>
              </goals>
              <phase>post-integration-test</phase>
            </execution>
            <!-- Threshold -->
          </executions>
        </plugin>

        <!-- extracts flaky test results into separate test cases; meant to be use in CI -->
        <plugin>
          <groupId>io.zeebe</groupId>
          <artifactId>flaky-test-extractor-maven-plugin</artifactId>
          <version>${plugin.version.flaky-tests}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>com.github.ekryd.sortpom</groupId>
        <artifactId>sortpom-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <configuration>
          <flattenMode>ossrh</flattenMode>
        </configuration>
      </plugin>
    </plugins>
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>${extension.version.os-maven-plugin}</version>
      </extension>
    </extensions>
  </build>

  <profiles>
    <profile>
      <id>skip-random-tests</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <excludes>
                <exclude>**/*RandomizedPropertyTest.java</exclude>
                <!-- Re-add the default exclude for inner classes, see https://github.com/camunda/zeebe/issues/8637 -->
                <exclude>**/*$*.java</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!-- Dedicated profile to run ONLY random tests. The include config overwrites the default pattern-->
      <id>include-random-tests</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <includes>
                <include>**/*RandomizedPropertyTest.java</include>
              </includes>
              <systemPropertyVariables>
                <processCount>10</processCount>
                <executionCount>100</executionCount>
                <replayExecutionCount>5</replayExecutionCount>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>parallel-tests</id>
      <properties>
        <forkCount>0.5C</forkCount>
        <junitThreadCount>2</junitThreadCount>
        <junitConfigurationParameters>
          <!-- allow junit5 parallel execution, configured on the number of cores
               note that this does not make tests parallel, this is still controlled in the tests
               themselves via the @Execution annotation. furthermore, child modules can define
               their own parallel configuration -->
          junit.jupiter.execution.parallel.enabled = true
          junit.jupiter.execution.parallel.config.strategy = fixed
          junit.jupiter.execution.parallel.config.fixed.parallelism = ${junitThreadCount}
        </junitConfigurationParameters>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <forkCount>${forkCount}</forkCount>
              <reuseForks>true</reuseForks>
              <systemPropertyVariables>
                <!-- use two dollar signs to prevent maven properties resolution, surefire will resolve
                the property later. If only ${surefire.forkNumber} is used maven will fail to resolve it
                and don't set the system property -->
                <testForkNumber>$${surefire.forkNumber}</testForkNumber>
              </systemPropertyVariables>
              <properties>
                <configurationParameters>${junitConfigurationParameters}</configurationParameters>
              </properties>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <forkCount>${forkCount}</forkCount>
              <reuseForks>true</reuseForks>
              <systemPropertyVariables>
                <!-- use two dollar signs to prevent maven properties resolution, surefire will resolve
                the property later. If only ${surefire.forkNumber} is used maven will fail to resolve it
                and don't set the system property -->
                <testForkNumber>$${surefire.forkNumber}</testForkNumber>
              </systemPropertyVariables>
              <properties>
                <configurationParameters>${junitConfigurationParameters}</configurationParameters>
              </properties>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>spotbugs</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-maven-plugin</artifactId>
            <version>${plugin.version.spotbugs}</version>
            <configuration>
              <effort>Max</effort>
              <threshold>Low</threshold>
              <xmlOutput>true</xmlOutput>
              <includeFilterFile>${spotbugs.include}</includeFilterFile>
              <excludeFilterFile>${spotbugs.exclude}</excludeFilterFile>
            </configuration>

            <!-- dependency on build tool to reference the spotbugs filter-->
            <dependencies>
              <dependency>
                <groupId>io.camunda</groupId>
                <artifactId>zeebe-build-tools</artifactId>
                <version>${project.version}</version>
              </dependency>
            </dependencies>
            <executions>
              <execution>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>

      </build>
    </profile>

    <!--
      This profile is used to add an explicit dependency to surefire-junit. To fix the race condition
      of https://github.com/zeebe-io/zeebe/issues/2379 we download all dependencies at the beginning
      with mvn dependency:go-offline and then run the tests in offline mode. But the plugin misses
      to download the surefire-junit dependency, therefore define an explicit dependency while downloading.

      NOTE: make sure to specify the scope as test for all dependencies, otherwise they will get
            added to the distribution!

      Usage: mvn install -Pprepare-offline
    -->
    <profile>
      <id>prepare-offline</id>
      <dependencies>
        <dependency>
          <groupId>org.apache.maven.surefire</groupId>
          <artifactId>surefire-junit4</artifactId>
          <version>${plugin.version.surefire}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.maven.surefire</groupId>
          <artifactId>surefire-junit47</artifactId>
          <version>${plugin.version.surefire}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.maven.surefire</groupId>
          <artifactId>surefire-junit-platform</artifactId>
          <version>${plugin.version.surefire}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.junit.jupiter</groupId>
          <artifactId>junit-jupiter-engine</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.codehaus.plexus</groupId>
          <artifactId>plexus-utils</artifactId>
          <version>${version.plexus-util}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.revapi</groupId>
          <artifactId>revapi-java</artifactId>
          <version>${version.revapi}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>io.zeebe</groupId>
          <artifactId>flaky-test-extractor-maven-plugin</artifactId>
          <version>${plugin.version.flaky-tests}</version>
          <scope>test</scope>
          <exclusions>
            <exclusion>
              <groupId>org.apache.maven.surefire</groupId>
	      <artifactId>surefire-shared-utils</artifactId>
            </exclusion>
            <!-- excluded for dependency convergence -->
	    <exclusion>
              <groupId>org.fusesource.jansi</groupId>
	      <artifactId>jansi</artifactId>
	    </exclusion>
          </exclusions>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>go-offline</id>
                <goals>
                  <goal>resolve-plugins</goal>
                  <goal>go-offline</goal>
                </goals>
                <phase>initialize</phase>
                <configuration>
                  <silent>true</silent>
                </configuration>
              </execution>
              <execution>
                <id>analyze-dependencies</id>
                <goals>
                  <goal>analyze-only</goal>
                </goals>
                <phase>verify</phase>
                <configuration>
                  <ignoredUnusedDeclaredDependencies combine.children="append">
                    <dep>org.revapi:revapi-java</dep>
                    <dep>io.zeebe:flaky-test-extractor-maven-plugin</dep>
                  </ignoredUnusedDeclaredDependencies>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- profile to perform only static code analysis using sonar scanner -->
    <profile>
      <id>sonar</id>
      <properties>
        <!-- sonarscanner integration -->
        <!-- sonar.login token must be passed at runtime to avoid sharing token -->
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.organization>camunda-cloud</sonar.organization>
        <sonar.login>${env.SONARCLOUD_TOKEN}</sonar.login>
        <sonar.links.issue>${project.scm.url}/issues</sonar.links.issue>
        <sonar.cpd.exclusions>broker/src/main/java/io/camunda/zeebe/broker/system/configuration/backpressure/Gradient2Cfg.java,broker/src/main/java/io/camunda/zeebe/broker/system/configuration/backpressure/GradientCfg.java</sonar.cpd.exclusions>
        <sonar.java.source>${version.java}</sonar.java.source>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.sonarsource.scanner.maven</groupId>
            <artifactId>sonar-maven-plugin</artifactId>
            <version>${plugin.version.sonar}</version>
            <executions>
              <execution>
                <goals>
                  <goal>sonar</goal>
                </goals>
                <phase>verify</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- profile to auto format -->
    <profile>
      <id>autoFormat</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.mycila</groupId>
            <artifactId>license-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>add-license</id>
                <goals>
                  <goal>format</goal>
                </goals>
                <phase>process-sources</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.diffplug.spotless</groupId>
            <artifactId>spotless-maven-plugin</artifactId>
            <configuration combine.children="append">
              <ratchetFrom>origin/main</ratchetFrom>
            </configuration>
            <executions>
              <execution>
                <id>spotless-format</id>
                <goals>
                  <goal>apply</goal>
                </goals>
                <phase>process-sources</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.github.ekryd.sortpom</groupId>
            <artifactId>sortpom-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>sortpom</id>
                <goals>
                  <goal>sort</goal>
                </goals>
                <phase>process-resources</phase>
                <configuration>
                  <createBackupFile>false</createBackupFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- profile to perform strict validation checks -->
    <profile>
      <id>checkFormat</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.mycila</groupId>
            <artifactId>license-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>check-license</id>
                <goals>
                  <goal>check</goal>
                </goals>
                <phase>validate</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.diffplug.spotless</groupId>
            <artifactId>spotless-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>spotless-check</id>
                <goals>
                  <goal>check</goal>
                </goals>
                <phase>validate</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.github.ekryd.sortpom</groupId>
            <artifactId>sortpom-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>sortpom</id>
                <goals>
                  <goal>verify</goal>
                </goals>
                <phase>validate</phase>
                <configuration>
                  <verifyFail>stop</verifyFail>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
      profile to enable flaky test analysis/extraction; running this module will extract flaky runs
      from your failed test cases as their own test case, such that the failed results can be viewed
      in Jenkins
      -->
    <profile>
      <id>extract-flaky-tests</id>

      <properties>
        <flaky.test.reportDir>surefire-reports</flaky.test.reportDir>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>io.zeebe</groupId>
            <artifactId>flaky-test-extractor-maven-plugin</artifactId>
            <configuration>
              <reportDir>${project.build.directory}/${flaky.test.reportDir}</reportDir>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>extract-flaky-tests</goal>
                </goals>
                <phase>post-integration-test</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
